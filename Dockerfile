# --- Stage 1: Build the Next.js application ---
# Use a specific and minimal Node.js image for building.
# 'alpine' variants are good for build environments to keep intermediate layers smaller.
FROM node:18-alpine AS builder

# Set the working directory inside the container for the build process.
WORKDIR /app

# Install necessary build dependencies. These are specific to Alpine Linux's apk package manager.
# python3, make, and g++ are typically required by some native Node.js dependencies.
# --no-cache reduces image size by not caching the package index.
RUN apk add --no-cache python3 make g++

# Copy package.json and package-lock.json first to leverage Docker's caching.
# If only source code changes, this layer (and npm ci) will be reused.
COPY package*.json ./

# Install Node.js dependencies.
# 'npm ci' ensures reproducible installs based on package-lock.json, ideal for CI/CD.
RUN npm ci

# Copy all project files into the build directory.
COPY . .

# Build the Next.js application.
# The 'output: "standalone"' configuration in next.config.js is assumed,
# which generates a self-contained output including necessary node_modules.
RUN npm run build

# --- Stage 2: Production Stage ---
# Use a very minimal base image for the runtime.
# Next.js's standalone output is designed to run with just a basic Linux environment,
# so 'alpine' is sufficient and much smaller than a full Node.js image.
FROM alpine AS runner

# Set working directory in the final image.
WORKDIR /app

# Create a non-root user for enhanced security.
# 'alpine' images have `adduser` available. Using a named user 'nextjs' for clarity.
# Using a specific UID/GID (e.g., 1000 or a high UID like 65532) is also a good practice.
RUN adduser -D nextjs

# Switch to the non-root user. All subsequent commands run as this user.
USER nextjs

# Copy necessary files from the builder stage.
# --chown ensures that the copied files are owned by the 'nextjs' user,
# preventing permission issues at runtime.
# .next/standalone contains the bundled server.js and its dependencies.
COPY --from=builder --chown=nextjs:nextjs /app/.next/standalone ./
# .next/static contains static assets generated by Next.js.
COPY --from=builder --chown=nextjs:nextjs /app/.next/static ./.next/static
# public directory contains static assets accessible from the root.
COPY --from=builder --chown=nextjs:nextjs /app/public ./public

# Set environment variables for the production environment.
# NODE_ENV=production is critical for Next.js optimizations.
ENV NODE_ENV=production
# PORT is the port your Next.js application will listen on.
ENV PORT=3000

# Expose the port the app runs on.
EXPOSE 3000

# Command to run the application.
# The Next.js standalone output typically has a server.js file that starts the app.
CMD ["node", "server.js"]
